function aliases
return

### =================================== FILES ===================================

#>>> fi :: List files with status and index
git -c color.status=always status --untracked-files=all -s | env LC_COLLATE=C sort -b -k2 | awk '{print NR, $0}'
#<<<

#>>> fs :: Stage files by index in `g fi` :: <idx> [<idx>...]
set -l fi (g fi | awk -F' ' '{ print $3 }')
for idx in $argv
    if not string match -qr '\d+' $idx
        echo "WARNING: index must be integer: $idx"
        continue
    end
    if test -z "$fi[$idx]"
        echo "WARNING: no files with index: $idx"
        continue
    end
    git add $fi[$idx]
end
g fi
#cpl
for fi_line in (g fi)
    _g::cpl (string split -n -m 3 ' ' $fi_line)[1 3] '(\s+\d+)*'
end
#<<<

#>>> fu :: Unstage files by index in `g fi` :: <idx> [<idx>...]
set -l fi (g fi | awk -F' ' '{ print $3 }')
for idx in $argv
    if not string match -qr '\d+' $idx
        echo "WARNING: index must be integer: $idx"
        continue
    end
    if test -z "$fi[$idx]"
        echo "WARNING: no files with index: $idx"
        continue
    end
    git reset -q HEAD $fi[$idx]
end
g fi
#cpl
for fi_line in (g fi)
    _g::cpl (string split -n -m 3 ' ' $fi_line)[1 3] '(\s+\d+)*'
end
#<<<

#>>> fa :: Stage all files
git add -u
git add .
g fi
#<<<

### =================================== BRANCHES =====================================

#>>> b :: Checkout on <branch> :: <branch>
if test (count $argv) -lt 1
    return (_g::err "Missing argument <branch>")
end
git checkout $argv[1]
#<<<

#>>> bc :: Checkout on new branch from current commit :: <branch>
if test (count $argv) -lt 1
    return (_g::err "Missing argument <branch>")
end
git checkout -B $argv[1]
#<<<

#>>> bf :: Checkout on new <branch> from <base> (def master) with actualize <base> :: <branch> [<base>]
if test (count $argv) -lt 1
    return (_g::err "Missing argument <branch>")
end
set -l branch $argv[2]
test -z "$branch"; and set branch 'master'

git checkout $branch
and git fetch
and git rebase
and git checkout -B $argv[1]
#<<<

#>>> brf :: Rebase from <base> (def master) with actualize <base> :: [<base>]
set -l branch (git rev-parse --abbrev-ref HEAD)
test -z $branch; and return (_g::err 'Can not derermine git branch')
test "$branch" = 'HEAD'; and return (_g::err 'On detached head')

set -l base_branch $argv[3]
test -z "$base_branch"; and set base_branch 'master'

git checkout $base_branch
and git fetch
and git rebase
and git checkout $branch
and git rebase $base_branch
#<<<

### =================================== COMMITS ===================================

#>>> cm :: Commit with message :: <message>
if test (count $argv) -lt 1
    return (_g::err "Missing argument <message>")
end
git commit -m $argv[1]
#<<<

#>>> ca :: Commit all files with message :: <message>
if test (count $argv) -lt 1
    return (_g::err "Missing argument <message>")
end
git commit -am $argv[1]
#<<<

#>>> cu :: Amend stages files to commit with no edit message
git commit --amend --no-edit
#<<<

### =================================== RESET/REBASE ===================================

#>>> re1 :: Uncommit last
git reset --soft HEAD^
#<<<

#>>> reh :: Drop all changes :: [<git reset args>]
git reset --hard $argv
#<<<

#>>> rec :: Drop all changes and remove untracked files :: [<git reset args>]
git reset --hard $argv
git clean -fd
#<<<

#>>> ri :: Rebase interactive <n> commits :: <n>
if test (count $argv) -lt 1
    return (_g::err "Missing argument <n>")
end
git rebase -i HEAD~$argv[1]
#<<<

### =================================== LOG ===================================

#>>> l :: Log commits with graph :: [<git log args>]
git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit -5 $argv
#<<<

#>>> ll :: `g l` with numstat :: [<git log args>]
g l --numstat $argv
#<<<

### =================================== STASH ===================================

# #>>> sl :: List stashes
# git stash list | sed -e 's/^stash@{\(.*\)}:.*: \(.*\)$/\1: \2/'
# #<<<

# #>>> sm :: Stash with message :: <message>
# if test (count $argv) -lt 1
#     return (_g::err "Missing argument <message>")
# end
# git stash save -q -u $argv
# g sl
# #<<<

# #>>> sp :: Pop stash with index :: <index>
# if test (count $argv) -lt 1
#     return (_g::err "Missing argument <index>")
# end
# git stash pop "stash@{$argv[1]}"
# #<<<

# #>>> sd :: DROP! stash with index :: <index>
# if test (count $argv) -lt 1
#     return (_g::err "Missing argument <index>")
# end
# git stash drop "stash@{$argv[1]}"
# #<<<

### =================================== PUSH/PULL ===================================

#>>> pl :: Pull:: [<git pull args>]
git pull $argv
#<<<

#>>> plp :: Pull & prune :: [<git pull args>]
git pull -p $argv
#<<<

#>>> ps :: Push :: [<git push args>]
git push $argv
#<<<

#>>> psf :: Force push :: [<git push args>]
git push -f $argv
#<<<

#>>> pt :: Push all tags :: [<git push args>]
git push --tags --all
#<<<

end
